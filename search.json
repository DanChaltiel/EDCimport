[{"path":"https://danchaltiel.github.io/EDCimport/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dan Chaltiel. Author, maintainer.","code":""},{"path":"https://danchaltiel.github.io/EDCimport/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Chaltiel D (2024). EDCimport: Import Data EDC Software. R package version 0.4.1.9046, https://danchaltiel.github.io/EDCimport/, https://github.com/DanChaltiel/EDCimport.","code":"@Manual{,   title = {EDCimport: Import Data from EDC Software},   author = {Dan Chaltiel},   year = {2024},   note = {R package version 0.4.1.9046, https://danchaltiel.github.io/EDCimport/},   url = {https://github.com/DanChaltiel/EDCimport}, }"},{"path":"https://danchaltiel.github.io/EDCimport/index.html","id":"edcimport","dir":"","previous_headings":"","what":"Import Data from EDC Software","title":"Import Data from EDC Software","text":"EDCimport package designed easily import data EDC software TrialMaster.","code":""},{"path":"https://danchaltiel.github.io/EDCimport/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Import Data from EDC Software","text":"also need 7-zip installed, preferably added PATH. [!WARNING] package developed work Windows unlikely work OS. welcome submit PR manage get work Mac Linux.","code":"# Install last version available on CRAN (once published) install.packages(\"EDCimport\")  # Install development version on Github devtools::install_github(\"DanChaltiel/EDCimport\")"},{"path":"https://danchaltiel.github.io/EDCimport/index.html","id":"load-the-data","dir":"","previous_headings":"Installation","what":"Load the data","title":"Import Data from EDC Software","text":"Inside TrialMaster, request export type SAS Xport, checkbox “Include Codelists” ticked. export generate .zip archive. , simply use read_trialmaster() archive password () retrieve data archive: resulting object tm list containing datasets, plus metadatas. can now use load_list() import list global environment use tables: many options available (e.g. colnames cleaning & table splitting), see ?read_trialmaster details.","code":"library(EDCimport) tm = read_trialmaster(\"path/to/my/archive.zip\", pw=\"foobar\") load_list(tm) #this also removes `tm` to save memory mean(dataset1$column5)"},{"path":"https://danchaltiel.github.io/EDCimport/index.html","id":"database-management-tools","dir":"","previous_headings":"Installation","what":"Database management tools","title":"Import Data from EDC Software","text":"EDCimport include set useful tools help using imported database. See References complete list.","code":""},{"path":"https://danchaltiel.github.io/EDCimport/index.html","id":"database-summary","dir":"","previous_headings":"Installation > Database management tools","what":"Database summary","title":"Import Data from EDC Software","text":"Reading database using read_trialmaster() generates .lookup dataframe, contains dataset number rows, columns, patients, CRF name. .lookup used many tools inside EDCimport, careful modify delete .","code":""},{"path":"https://danchaltiel.github.io/EDCimport/index.html","id":"search-the-whole-database","dir":"","previous_headings":"Installation > Database management tools","what":"Search the whole database","title":"Import Data from EDC Software","text":"Using find_keyword(), can run global search database. instance, say remember dataset column located “date ECG”. find_keyword() search every column name label give answer:","code":"find_keyword(\"date\") #> # A tibble: 10 x 3 #>    dataset names   labels                       #>    <chr>   <chr>   <chr>                        #>  1 pat     PTRNDT  Randomization Date           #>  2 pat     RGSTDT  Registration Date            #>  3 site    INVDAT  Deactivation date            #>  4 site    TRGTDT  Target Enroll Date           #>  5 trial   TRSPDT  End Date                     #>  6 trial   TRSTDT  Start Date                   #>  7 visit   VISIT2  Visit Date                   #>  8 visit   EEXPVDT Earliest Expected Visit Date #>  9 vs      ECGDAT  Date of ECG                  #> 10 vs      VISITDT Visit Date"},{"path":"https://danchaltiel.github.io/EDCimport/index.html","id":"swimmer-plot","dir":"","previous_headings":"Installation","what":"Swimmer Plot","title":"Import Data from EDC Software","text":"edc_swimmerplot() function create swimmer plot date variables whole database. 2 arguments interest: group, grouping variable (e.g. treatment arm) origin, date variable acting time zero (e.g. date enrollment) outputs plotly interactive graph can select dates interest zoom mouse.  Note modification made running read_trialmaster() taken account. instance, mutating column .Date() one tables add new group plot.","code":"edc_swimmerplot() edc_swimmerplot(group=\"enrolres$arm\") edc_swimmerplot(origin=\"enrolres$enroldt\")"},{"path":"https://danchaltiel.github.io/EDCimport/reference/EDCimport-package.html","id":null,"dir":"Reference","previous_headings":"","what":"EDCimport: Import Data from EDC Software — EDCimport-package","title":"EDCimport: Import Data from EDC Software — EDCimport-package","text":"convenient toolbox import data exported Electronic Data Capture (EDC) software 'TrialMaster'.","code":""},{"path":[]},{"path":"https://danchaltiel.github.io/EDCimport/reference/EDCimport-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"EDCimport: Import Data from EDC Software — EDCimport-package","text":"Maintainer: Dan Chaltiel dan.chaltiel@gmail.com (ORCID)","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/ae_plot_grade_max.html","id":null,"dir":"Reference","previous_headings":"","what":"Graphic representation of AEs by grade max — ae_plot_grade_max","title":"Graphic representation of AEs by grade max — ae_plot_grade_max","text":"Produces graphic representation AE, counting maximum grade patient experienced, colored treatment arm. Returns 3 representations arm!=NULL.","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/ae_plot_grade_max.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Graphic representation of AEs by grade max — ae_plot_grade_max","text":"","code":"ae_plot_grade_max(   df_ae,   ...,   df_enrol,   type = c(\"stack\", \"dodge\", \"fill\"),   proportion = TRUE,   drop_levels = FALSE,   arm = \"ARM\",   subjid = \"SUBJID\",   soc = \"AESOC\",   grade = \"AEGR\" )"},{"path":"https://danchaltiel.github.io/EDCimport/reference/ae_plot_grade_max.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Graphic representation of AEs by grade max — ae_plot_grade_max","text":"df_ae adverse event dataset, one row per AE, containing subjid, soc, grade ... unused df_enrol enrollment dataset, one row per patient, containing subjid (arm needed). patients dataset. type plots included. One c(\"stack\", \"dodge\", \"fill\"). drop_levels whether drop unused grade levels. arm name treatment column df_enrol. Case-insensitive. Can set NULL group. subjid name patient ID df_ae df_enrol. Case-insensitive. soc name SOC column df_ae. Case-insensitive. Grade considered 0 missing(e.g. patient absent df_ae). grade name AE grade column df_ae. Case-insensitive.","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/ae_plot_grade_max.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Graphic representation of AEs by grade max — ae_plot_grade_max","text":"patchwork ggplots","code":""},{"path":[]},{"path":"https://danchaltiel.github.io/EDCimport/reference/ae_plot_grade_max.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Graphic representation of AEs by grade max — ae_plot_grade_max","text":"","code":"tm = edc_example_ae() ae_plot_grade_max(df_ae=tm$ae, df_enrol=tm$enrolres) #> Warning: Returning more (or less) than 1 row per `summarise()` group was deprecated in #> dplyr 1.1.0. #> ℹ Please use `reframe()` instead. #> ℹ When switching from `summarise()` to `reframe()`, remember that `reframe()` #>   always returns an ungrouped data frame and adjust accordingly. #> ℹ The deprecated feature was likely used in the EDCimport package. #>   Please report the issue at <https://github.com/DanChaltiel/EDCimport/issues>.  ae_plot_grade_max(df_ae=tm$ae, df_enrol=tm$enrolres, type=c(\"dodge\", \"fill\"), proportion=FALSE)  ae_plot_grade_max(df_ae=tm$ae, df_enrol=tm$enrolres, arm=NULL) + ggplot2::coord_flip()   #you can use modificators from the patchwork package, like \"&\" if (FALSE) { # \\dontrun{ library(patchwork) ae_plot_grade_max(df_ae=tm$ae, df_enrol=tm$enrolres) & labs(fill=\"Group\") } # }"},{"path":"https://danchaltiel.github.io/EDCimport/reference/ae_plot_grade_n.html","id":null,"dir":"Reference","previous_headings":"","what":"Graphic representation of AEs — ae_plot_grade_n","title":"Graphic representation of AEs — ae_plot_grade_n","text":"Produce graphic representation AE, counting AE bars patient, colored grade. Can faceted treatment arm.","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/ae_plot_grade_n.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Graphic representation of AEs — ae_plot_grade_n","text":"","code":"ae_plot_grade_n(   df_ae,   ...,   df_enrol,   low = \"#ffc425\",   high = \"#d11141\",   arm = \"ARM\",   grade = \"AEGR\",   subjid = \"SUBJID\" )"},{"path":"https://danchaltiel.github.io/EDCimport/reference/ae_plot_grade_n.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Graphic representation of AEs — ae_plot_grade_n","text":"df_ae adverse event dataset, one row per AE, containing subjid, soc, grade ... unused df_enrol enrollment dataset, one row per patient, containing subjid (arm needed). patients dataset. low color Grade 1 AE high color Grade 5 AE arm name treatment column df_enrol. Case-insensitive. Can set NULL group. grade name AE grade column df_ae. Case-insensitive. subjid name patient ID df_ae df_enrol. Case-insensitive.","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/ae_plot_grade_n.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Graphic representation of AEs — ae_plot_grade_n","text":"ggplot","code":""},{"path":[]},{"path":"https://danchaltiel.github.io/EDCimport/reference/ae_plot_grade_n.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Graphic representation of AEs — ae_plot_grade_n","text":"","code":"tm = edc_example_ae() #> Warning: Option \"edc_lookup\" has been overwritten. ae_plot_grade_n(df_ae=tm$ae, df_enrol=tm$enrolres)  ae_plot_grade_n(df_ae=tm$ae, df_enrol=tm$enrolres, arm=NULL)"},{"path":"https://danchaltiel.github.io/EDCimport/reference/ae_plot_soc.html","id":null,"dir":"Reference","previous_headings":"","what":"Graphic representation of AEs by soc (Butterfly plot) — ae_plot_soc","title":"Graphic representation of AEs by soc (Butterfly plot) — ae_plot_soc","text":"Produces graphic representation AE, counting maximum grade patient experienced, colored treatment arm. Returns 3 representations arm!=NULL.","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/ae_plot_soc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Graphic representation of AEs by soc (Butterfly plot) — ae_plot_soc","text":"","code":"ae_plot_soc(   df_ae,   ...,   df_enrol,   arm = \"ARM\",   subjid = \"SUBJID\",   soc = \"AESOC\",   severe = \"SEVERE\" )"},{"path":"https://danchaltiel.github.io/EDCimport/reference/ae_plot_soc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Graphic representation of AEs by soc (Butterfly plot) — ae_plot_soc","text":"df_ae adverse event dataset, one row per AE, containing subjid, soc, grade ... unused df_enrol enrollment dataset, one row per patient, containing subjid (arm needed). patients dataset. arm name treatment column df_enrol. Case-insensitive. Can set NULL group. subjid name patient ID df_ae df_enrol. Case-insensitive. soc name SOC column df_ae. Case-insensitive. Grade considered 0 missing(e.g. patient absent df_ae). severe name logical column df_ae telling wheter AE severe. Case-insensitive.","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/ae_plot_soc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Graphic representation of AEs by soc (Butterfly plot) — ae_plot_soc","text":"crosstable (dataframe)","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/ae_plot_soc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Graphic representation of AEs by soc (Butterfly plot) — ae_plot_soc","text":"function ae_plot_soc() creates summary table maximum AE grade experienced per patient. resulting crosstable can piped as_flextable() get nicely formatted flextable.","code":""},{"path":[]},{"path":"https://danchaltiel.github.io/EDCimport/reference/ae_plot_soc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Graphic representation of AEs by soc (Butterfly plot) — ae_plot_soc","text":"","code":"tm = edc_example_ae() #> Warning: Option \"edc_lookup\" has been overwritten. tm$ae %>%    #dplyr::mutate(severe = aeser==\"Yes\") %>%    dplyr::mutate(severe = aegr>=3) %>%    ae_plot_soc(df_enrol=tm$enrolres)"},{"path":"https://danchaltiel.github.io/EDCimport/reference/ae_table_grade_max.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary tables for AE by grade max — ae_table_grade_max","title":"Summary tables for AE by grade max — ae_table_grade_max","text":"function ae_table_grade_max() creates summary table maximum AE grade experienced per patient. resulting crosstable can piped as_flextable() get nicely formatted flextable.","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/ae_table_grade_max.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary tables for AE by grade max — ae_table_grade_max","text":"","code":"ae_table_grade_max(   df_ae,   ...,   df_enrol,   arm = \"ARM\",   subjid = \"SUBJID\",   soc = \"AESOC\",   grade = \"AEGR\",   total = TRUE,   digits = 0 )"},{"path":"https://danchaltiel.github.io/EDCimport/reference/ae_table_grade_max.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary tables for AE by grade max — ae_table_grade_max","text":"df_ae adverse event dataset, one row per AE, containing subjid, soc, grade ... unused df_enrol enrollment dataset, one row per patient, containing subjid (arm needed). patients dataset. arm name treatment column df_enrol. Case-insensitive. Can set NULL group. subjid name patient ID df_ae df_enrol. Case-insensitive. soc name SOC column df_ae. Case-insensitive. Grade considered 0 missing(e.g. patient absent df_ae). grade name AE grade column df_ae. Case-insensitive. total whether add total column arm digits significant digits percentages","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/ae_table_grade_max.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary tables for AE by grade max — ae_table_grade_max","text":"crosstable (dataframe)","code":""},{"path":[]},{"path":"https://danchaltiel.github.io/EDCimport/reference/ae_table_grade_max.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary tables for AE by grade max — ae_table_grade_max","text":"","code":"tm = edc_example_ae() #> Warning: Option \"edc_lookup\" has been overwritten. ae_table_grade_max(df_ae=tm$ae, df_enrol=tm$enrolres) #> # A tibble: 7 × 6 #>   .id       label     variable Ctl      Trt      Total     #>   <chr>     <chr>     <chr>    <chr>    <chr>    <chr>     #> 1 grade_max Max grade Grade 1  3 (11%)  1 (4%)   4 (8%)    #> 2 grade_max Max grade Grade 2  5 (19%)  5 (22%)  10 (20%)  #> 3 grade_max Max grade Grade 3  10 (37%) 8 (35%)  18 (36%)  #> 4 grade_max Max grade Grade 4  8 (30%)  1 (4%)   9 (18%)   #> 5 grade_max Max grade Grade 5  1 (4%)   5 (22%)  6 (12%)   #> 6 grade_max Max grade No AE    0 (0%)   3 (13%)  3 (6%)    #> 7 grade_max Max grade Total    27 (54%) 23 (46%) 50 (100%) ae_table_grade_max(df_ae=tm$ae, df_enrol=tm$enrolres, arm=NULL) #> # A tibble: 7 × 4 #>   .id       label     variable value     #>   <chr>     <chr>     <chr>    <chr>     #> 1 grade_max Max grade Grade 1  4 (8%)    #> 2 grade_max Max grade Grade 2  10 (20%)  #> 3 grade_max Max grade Grade 3  18 (36%)  #> 4 grade_max Max grade Grade 4  9 (18%)   #> 5 grade_max Max grade Grade 5  6 (12%)   #> 6 grade_max Max grade No AE    3 (6%)    #> 7 grade_max Max grade Total    50 (100%)  if (FALSE) { # \\dontrun{ #you can use as_flextable() to get an HTML flextable #you can use modificators modificators from the flextable package library(flextable) ae_table_grade_max(df_ae=tm$ae, df_enrol=tm$enrolres, arm=NULL) %>%    as_flextable() %>%    add_footer_lines(\"Percentages are given as the proportion of patients                      presenting at most one AE of given grade\") ae_table_grade_max(df_ae=tm$ae, df_enrol=tm$enrolres) %>%   as_flextable(by_header=\"Both arms\") %>%    highlight(i=~variable==\"Grade 5\", j=-1) } # }"},{"path":"https://danchaltiel.github.io/EDCimport/reference/ae_table_grade_n.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary tables for AE — ae_table_grade_n","title":"Summary tables for AE — ae_table_grade_n","text":"Summary tables AE","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/ae_table_grade_n.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary tables for AE — ae_table_grade_n","text":"","code":"ae_table_grade_n(   df_ae,   ...,   df_enrol,   arm = \"ARM\",   grade = \"AEGR\",   subjid = \"SUBJID\",   soc = \"AESOC\",   total = FALSE,   digits = 0 )"},{"path":"https://danchaltiel.github.io/EDCimport/reference/ae_table_grade_n.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary tables for AE — ae_table_grade_n","text":"df_ae adverse event dataset, one row per AE, containing subjid, soc, grade ... unused df_enrol enrollment dataset, one row per patient, containing subjid (arm needed). patients dataset. arm name treatment column df_enrol. Case-insensitive. Can set NULL group. grade name AE grade column df_ae. Case-insensitive. subjid name patient ID df_ae df_enrol. Case-insensitive. soc name SOC column df_ae. Case-insensitive. Grade considered 0 missing(e.g. patient absent df_ae). total whether add total column arm digits significant digits percentages","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/ae_table_grade_n.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary tables for AE — ae_table_grade_n","text":"crosstable","code":""},{"path":[]},{"path":"https://danchaltiel.github.io/EDCimport/reference/ae_table_grade_n.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary tables for AE — ae_table_grade_n","text":"","code":"if (FALSE) { # \\dontrun{ tm = edc_example_ae()  ae_table_grade_n(df_ae=tm$ae, df_enrol=tm$enrolres) %>%    as_flextable() %>%    flextable::add_footer_lines(\"Percentages are given as the proportion of patients                                 presenting at least one AE of given grade\")  ae_table_grade_n(df_ae=tm$ae, df_enrol=tm$enrolres, arm=NULL) %>%    as_flextable(by_header=F) %>%    flextable::set_header_labels(values=c(\"\",\"\",\"N (%)\"))     #To get SAE only, filter df_ae first tm$ae %>% filter(sae==TRUE) %>% ae_table_grade_n(df_enrol=tm$enrolres, arm=NULL) } # }"},{"path":"https://danchaltiel.github.io/EDCimport/reference/ae_table_soc.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary tables for AE by SOC — ae_table_soc","title":"Summary tables for AE by SOC — ae_table_soc","text":"function ae_table_soc() creates summary table maximum AE grades patient according term SOC CTCAE. resulting dataframe can piped as_flextable() get nicely formatted flextable.","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/ae_table_soc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary tables for AE by SOC — ae_table_soc","text":"","code":"ae_table_soc(   df_ae,   ...,   df_enrol,   arm = \"ARM\",   term = \"AETERM\",   soc = \"AESOC\",   grade = \"AEGR\",   subjid = \"SUBJID\",   sort_by_ae = TRUE,   total = TRUE,   digits = 0,   warn_miss = FALSE )  # S3 method for class 'ae_table_soc' as_flextable(x, arm_colors = c(\"#f2dcdb\", \"#dbe5f1\", \"#ebf1dd\", \"#e5e0ec\"))"},{"path":"https://danchaltiel.github.io/EDCimport/reference/ae_table_soc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary tables for AE by SOC — ae_table_soc","text":"df_ae adverse event dataset, one row per AE, containing subjid, soc, grade ... unused df_enrol enrollment dataset, one row per patient, containing subjid (arm needed). patients dataset. arm name treatment column df_enrol. Case-insensitive. Can set NULL group. term name CTCAE term column df_ae. Case-insensitive. Can set NULL. soc name SOC column df_ae. Case-insensitive. Grade considered 0 missing(e.g. patient absent df_ae). grade name AE grade column df_ae. Case-insensitive. subjid name patient ID df_ae df_enrol. Case-insensitive. sort_by_ae table sorted number alphabetically total whether add total column arm digits significant digits percentages warn_miss whether warn missing values x dataframe, resulting ae_table_soc() arm_colors colors arm groups","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/ae_table_soc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary tables for AE by SOC — ae_table_soc","text":"dataframe (ae_table_soc()) flextable (as_flextable()). formatted flextable","code":""},{"path":[]},{"path":"https://danchaltiel.github.io/EDCimport/reference/ae_table_soc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary tables for AE by SOC — ae_table_soc","text":"","code":"tm = edc_example_ae() #> Warning: Option \"edc_lookup\" has been overwritten. ae_table_soc(df_ae=tm$ae, df_enrol=tm$enrolres, term=NULL) #> # A tibble: 23 × 13 #>    soc    ctl_G1 ctl_G2 ctl_G3 ctl_G4 ctl_G5 ctl_Tot trt_G1 trt_G2 trt_G3 trt_G4 #>    <chr>  <glue> <glue> <glue> <glue> <glue> <glue>  <glue> <glue> <glue> <glue> #>  1 Injur… 1 (4%) NA     1 (4%) 1 (4%) NA     3 (11%) 3 (13… 1 (4%) 1 (4%) NA     #>  2 Neopl… 2 (7%) 1 (4%) NA     NA     NA     3 (11%) 2 (9%) NA     2 (9%) NA     #>  3 Nervo… 1 (4%) 1 (4%) 3 (11… NA     NA     5 (19%) NA     NA     3 (13… NA     #>  4 Eye d… 2 (7%) NA     2 (7%) 1 (4%) NA     5 (19%) 1 (4%) 1 (4%) NA     NA     #>  5 Hepat… NA     2 (7%) NA     1 (4%) NA     3 (11%) 2 (9%) 1 (4%) 1 (4%) NA     #>  6 Infec… 2 (7%) 2 (7%) 1 (4%) NA     NA     5 (19%) NA     NA     1 (4%) NA     #>  7 Skin … NA     NA     1 (4%) 1 (4%) NA     2 (7%)  NA     2 (9%) 2 (9%) 1 (4%) #>  8 Ear a… 1 (4%) NA     NA     NA     NA     1 (4%)  1 (4%) 1 (4%) 1 (4%) 2 (9%) #>  9 Repro… 2 (7%) 4 (15… NA     NA     NA     6 (22%) NA     NA     NA     NA     #> 10 Respi… 2 (7%) NA     1 (4%) 1 (4%) NA     4 (15%) NA     NA     2 (9%) NA     #> # ℹ 13 more rows #> # ℹ 2 more variables: trt_G5 <glue>, trt_Tot <glue> ae_table_soc(df_ae=tm$ae, df_enrol=tm$enrolres, term=NULL, arm=NULL) #> # A tibble: 23 × 7 #>    soc                                all_G1 all_G2 all_G3 all_G4 all_G5 all_Tot #>    <chr>                              <glue> <glue> <glue> <glue> <glue> <glue>  #>  1 Injury, poisoning and procedural … 4 (8%) 1 (2%) 2 (4%) 1 (2%) 1 (2%) 9 (18%) #>  2 Neoplasms benign, malignant and u… 4 (8%) 1 (2%) 2 (4%) NA     1 (2%) 8 (16%) #>  3 Nervous system disorders           1 (2%) 1 (2%) 6 (12… NA     NA     8 (16%) #>  4 Eye disorders                      3 (6%) 1 (2%) 2 (4%) 1 (2%) NA     7 (14%) #>  5 Hepatobiliary disorders            2 (4%) 3 (6%) 1 (2%) 1 (2%) NA     7 (14%) #>  6 Infections and infestations        2 (4%) 2 (4%) 2 (4%) NA     1 (2%) 7 (14%) #>  7 Skin and subcutaneous tissue diso… NA     2 (4%) 3 (6%) 2 (4%) NA     7 (14%) #>  8 Ear and labyrinth disorders        2 (4%) 1 (2%) 1 (2%) 2 (4%) NA     6 (12%) #>  9 Reproductive system and breast di… 2 (4%) 4 (8%) NA     NA     NA     6 (12%) #> 10 Respiratory, thoracic and mediast… 2 (4%) NA     3 (6%) 1 (2%) NA     6 (12%) #> # ℹ 13 more rows  if (FALSE) { # \\dontrun{ #the resulting flextable can be customized using the flextable package library(flextable) ae_table_soc(tm$ae, df_enrol=tm$enrolres, total=FALSE) %>%    as_flextable() %>%    hline(i=~soc==\"\" & soc!=dplyr::lead(soc)) ae_table_soc(tm$ae, df_enrol=tm$enrolres, term=NULL, sort_by_ae=FALSE) %>%    as_flextable() %>%    hline() ae_table_soc(tm$ae, df_enrol=tm$enrolres, term=NULL, arm=NULL) %>%    as_flextable() } # }"},{"path":"https://danchaltiel.github.io/EDCimport/reference/assert_no_duplicate.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that a dataframe has one row per patient — assert_no_duplicate","title":"Assert that a dataframe has one row per patient — assert_no_duplicate","text":"Check duplicate column holding patient ID pipeable style.  Mostly useful joining two datasets.","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/assert_no_duplicate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that a dataframe has one row per patient — assert_no_duplicate","text":"","code":"assert_no_duplicate(df, by = NULL, id_col = get_subjid_cols())"},{"path":"https://danchaltiel.github.io/EDCimport/reference/assert_no_duplicate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that a dataframe has one row per patient — assert_no_duplicate","text":"df dataframe (optional) grouping columns id_col name columns holding patient ID","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/assert_no_duplicate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assert that a dataframe has one row per patient — assert_no_duplicate","text":"df dataset, unchanged","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/assert_no_duplicate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assert that a dataframe has one row per patient — assert_no_duplicate","text":"","code":"if (FALSE) { # \\dontrun{ #without duplicate => no error, continue the pipeline tibble(subjid=c(1:10)) %>% assert_no_duplicate() %>% nrow()  #with duplicate => throws an error tibble(subjid=c(1:10, 1:2)) %>% assert_no_duplicate() %>% nrow()  #By groups df = tibble(subjid=rep(1:10, 4), visit=rep(c(\"V1\", \"V2\"), 2, each=10),              group=rep(c(\"A\", \"B\"), each=20)) df %>% assert_no_duplicate() #error df %>% assert_no_duplicate(by=c(visit, group)) #no error } # }"},{"path":"https://danchaltiel.github.io/EDCimport/reference/build_lookup.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a lookup table — build_lookup","title":"Generate a lookup table — build_lookup","text":"Generate lookup table","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/build_lookup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a lookup table — build_lookup","text":"","code":"build_lookup(data_list)"},{"path":"https://danchaltiel.github.io/EDCimport/reference/build_lookup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a lookup table — build_lookup","text":"data_list list containing least 1 dataframe","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/build_lookup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a lookup table — build_lookup","text":"dataframe summarizing column names labels","code":""},{"path":[]},{"path":"https://danchaltiel.github.io/EDCimport/reference/build_lookup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a lookup table — build_lookup","text":"","code":"x = edc_example() #> Warning: Option \"edc_lookup\" has been overwritten. x$.lookup=NULL lk = build_lookup(x) lk #> ── Lookup table  ─────────────────────────────────────────────────────────────── #>   dataset  nrow  ncol #>   <chr>   <dbl> <dbl> #> 1 db0        50     5 #> 2 db2        50     5 #> 3 db3        50     6 #> 4 db1       100     6 lk %>% tidyr::unnest(c(names, labels))   #> # A tibble: 22 × 5 #>    dataset  nrow  ncol names          labels          #>    <chr>   <dbl> <dbl> <chr>          <chr>           #>  1 db0        50     5 SUBJID         Subject ID      #>  2 db0        50     5 age            Age (years)     #>  3 db0        50     5 date_naissance Date of birth   #>  4 db0        50     5 group          Treatment       #>  5 db0        50     5 crfname        Form name       #>  6 db2        50     5 SUBJID         Subject ID      #>  7 db2        50     5 date4          Date at visit 4 #>  8 db2        50     5 date5          Date at visit 5 #>  9 db2        50     5 date6          Date at visit 6 #> 10 db2        50     5 crfname        Form name       #> # ℹ 12 more rows"},{"path":"https://danchaltiel.github.io/EDCimport/reference/crf_status_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Show the current CRF status distribution — crf_status_plot","title":"Show the current CRF status distribution — crf_status_plot","text":"Generate barplot showing distribution CRF status (Complete, Incomplete, ...) dataset database.","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/crf_status_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show the current CRF status distribution — crf_status_plot","text":"","code":"crf_status_plot(   crfstat_col = \"CRFSTAT\",   ...,   details = FALSE,   pal = edc_pal_crf(),   crfstat_lvls = names(pal),   x_label = \"{dataset}\",   treat_as_worst = NULL )  edc_pal_crf()"},{"path":"https://danchaltiel.github.io/EDCimport/reference/crf_status_plot.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Show the current CRF status distribution — crf_status_plot","text":"ggsci:::ggsci_db$lancet[\"lanonc\"] %>% dput()","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/crf_status_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show the current CRF status distribution — crf_status_plot","text":"crfstat_col column name CRF status details whether show CRF status levels. FALSE (default), recode status \"Complete\", \"Incomplete\", \"Data\". pal palette, defaulting helper EDCimport:::edc_pal_crf() crfstat_lvls CRF status levels, \"best\" \"worst\". plot ordered \"worst\" level. x_label glue pattern determining tick label x axis. Available variables c(\"nrow\", \"ncol\", \"n_id\", \"rows_per_id\", \"crfname\"), taken get_lookup(). treat_as_worst regex levels treated worst ordering","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/crf_status_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show the current CRF status distribution — crf_status_plot","text":"ggplot","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/crf_status_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show the current CRF status distribution — crf_status_plot","text":"","code":"if (FALSE) { # \\dontrun{ #import a TM database and use load_list(), then: crf_status_plot() + ggtitle(date_extraction) crf_status_plot(pal=rev(edc_pal_crf())) crf_status_plot(details=TRUE, treat_as_worst=\"No Data\") crf_status_plot(x_label=\"{crfname} (N={n_id}, n={nrow})\")  p = crf_status_plot(details=TRUE) p$data$crfstat %>% unique() #> [1] \"Incomplete\"        \"No Data Locked\"    \"No Data\"           \"Signed\"            #> [5] \"Partial Monitored\" \"Monitored\"         \"Complete Locked\"   \"Complete\"  } # }"},{"path":"https://danchaltiel.github.io/EDCimport/reference/data_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Example databases — data_example","title":"Example databases — data_example","text":"List tables used EDCimport examples: edc_example() can used result read_trialmaster() edc_example_plot() can used test edc_swimmerplot() edc_example_mixed() can used test split_mixed_datasets()","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/data_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example databases — data_example","text":"","code":"edc_example_mixed(N = 100, seed = 42)  edc_example(N = 50, seed = 42)  edc_example_plot(N = 50, seed = 42)  edc_example_ae(N = 50, seed = 42)"},{"path":"https://danchaltiel.github.io/EDCimport/reference/data_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Example databases — data_example","text":"N number patients seed random seed","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/data_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Example databases — data_example","text":"list tables","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/edc_data_warn.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardized warning system — edc_data_warn","title":"Standardized warning system — edc_data_warn","text":"checking data, filter dataset get problematic rows.  , use either: edc_data_warn() generate standardized warning can forwarded datamanager edc_data_warn() abort script problem serious Database issues traced separate file, identifying row number, file shared data-manager.  Use edc_data_warnings() generate table file.","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/edc_data_warn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardized warning system — edc_data_warn","text":"","code":"edc_data_warn(   df,   message,   ...,   issue_n = \"xx\",   max_subjid = 5,   write_to_csv = FALSE,   col_subjid = get_subjid_cols() )  edc_data_stop(...) #same arguments  edc_data_warnings()"},{"path":"https://danchaltiel.github.io/EDCimport/reference/edc_data_warn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardized warning system — edc_data_warn","text":"df filtered dataframe message message. Can use cli formats. ... unused issue_n identifying row number max_subjid max number subject ID show message write_to_csv path save df csv file can shared DM details. col_subjid column name subject ID. Set NULL ignore.","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/edc_data_warn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standardized warning system — edc_data_warn","text":"df invisibly","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/edc_data_warn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standardized warning system — edc_data_warn","text":"","code":"library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union tm = edc_example() #> Warning: Option \"edc_lookup\" has been overwritten. load_list(tm) db0 %>%    filter(age>70) %>%    edc_data_warn(\"Age should not be >70\", issue_n=1) #> Warning: Issue #01: Age should not be >70 (2 patients: #9 and #12)  db0 %>%    filter(age<25) %>%    edc_data_warn(\"Age should not be <25\", issue_n=2) #> Warning: Issue #02: Age should not be <25 (1 patient: #18)  db1 %>%    filter(n()>1, .by=SUBJID) %>%    edc_data_warn(\"There are duplicated patients in `db1`\", issue_n=3) #> Warning: Issue #03: There are duplicated patients in `db1` (50 patients: #1, #2, #3, #4, #> #5, …)  edc_data_warnings() #> # A tibble: 3 × 4 #>   issue_n message                                subjid     fun      #>   <chr>   <chr>                                  <list>     <chr>    #> 1 01      Age should not be >70                  <chr [2]>  cli_warn #> 2 02      Age should not be <25                  <chr [1]>  cli_warn #> 3 03      There are duplicated patients in `db1` <chr [50]> cli_warn  if (FALSE) { # \\dontrun{ db0 %>%    filter(age<25) %>%    edc_data_warn(\"Age should not be <25\", write_to_csv=\"check/check_age_25.csv\")    db0 %>%    filter(age<25) %>%    edc_data_stop(\"Age should *never* be <25\") } # }"},{"path":"https://danchaltiel.github.io/EDCimport/reference/edc_db_to_excel.html","id":null,"dir":"Reference","previous_headings":"","what":"Save the database as an Excel file — edc_db_to_excel","title":"Save the database as an Excel file — edc_db_to_excel","text":"RStudio good showing data, can convenient browse database using MS Excel. function turns whole TM export (named list datasets) Excel workbook, one tab dataset. Use edc_db_to_excel() create file edc_browse_excel() open .","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/edc_db_to_excel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save the database as an Excel file — edc_db_to_excel","text":"","code":"edc_db_to_excel(   filename = tempfile(fileext = \".xlsx\"),   ...,   datasets = get_datasets(),   overwrite = FALSE,   open = FALSE )  edc_browse_excel()"},{"path":"https://danchaltiel.github.io/EDCimport/reference/edc_db_to_excel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save the database as an Excel file — edc_db_to_excel","text":"filename path Excel output file. Default temporary file. Use special value TRUE save \"data/database_date_extraction.xlsx\". ... unused datasets named list dataframes. Default TM export. overwrite whether overwrite existing file. Default FALSE. open whether open Excel file afterward. Default FALSE.","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/edc_db_to_excel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save the database as an Excel file — edc_db_to_excel","text":"nothing","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/edc_db_to_excel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save the database as an Excel file — edc_db_to_excel","text":"","code":"if (FALSE) { # \\dontrun{   tm = edc_example()   load_list(tm)     edc_db_to_excel() #default arguments are usually OK   edc_db_to_excel(filename=TRUE) } # }"},{"path":"https://danchaltiel.github.io/EDCimport/reference/edc_inform_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Shows how many code you wrote — edc_inform_code","title":"Shows how many code you wrote — edc_inform_code","text":"Shows many code wrote","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/edc_inform_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shows how many code you wrote — edc_inform_code","text":"","code":"edc_inform_code(main = \"main.R\", Rdir = \"R/\")"},{"path":"https://danchaltiel.github.io/EDCimport/reference/edc_inform_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shows how many code you wrote — edc_inform_code","text":"main main R file, sources ones Rdir R directory, sourced R files located","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/edc_inform_code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shows how many code you wrote — edc_inform_code","text":"Nothing","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/edc_lookup.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the lookup table from options — edc_lookup","title":"Retrieve the lookup table from options — edc_lookup","text":"Retrieve lookup table options","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/edc_lookup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the lookup table from options — edc_lookup","text":"","code":"edc_lookup(..., check_null = TRUE)"},{"path":"https://danchaltiel.github.io/EDCimport/reference/edc_lookup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve the lookup table from options — edc_lookup","text":"... passed dplyr::arrange() check_null whether stop lookup NULL","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/edc_lookup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve the lookup table from options — edc_lookup","text":"lookup dataframe summarizing database import","code":""},{"path":[]},{"path":"https://danchaltiel.github.io/EDCimport/reference/edc_lookup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve the lookup table from options — edc_lookup","text":"","code":"tm = edc_example() #> Warning: Option \"edc_lookup\" has been overwritten. load_list(tm) edc_lookup() #> ── Lookup table  ─────────────────────────────────────────────────────────────── #>   dataset  nrow  ncol #>   <chr>   <dbl> <dbl> #> 1 db0        50     5 #> 2 db2        50     5 #> 3 db3        50     6 #> 4 db1       100     6 edc_lookup(dataset) #> ── Lookup table  ─────────────────────────────────────────────────────────────── #>   dataset  nrow  ncol #>   <chr>   <dbl> <dbl> #> 1 db0        50     5 #> 2 db1       100     6 #> 3 db2        50     5 #> 4 db3        50     6"},{"path":"https://danchaltiel.github.io/EDCimport/reference/edc_new_project.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a clinical research project — edc_new_project","title":"Create a clinical research project — edc_new_project","text":"Create standardized, empty clinical research project.","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/edc_new_project.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a clinical research project — edc_new_project","text":"","code":"edc_new_project(path, open = TRUE)"},{"path":"https://danchaltiel.github.io/EDCimport/reference/edc_new_project.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a clinical research project — edc_new_project","text":"path path. exist, created. open TRUE, opens new project RStudio.","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/edc_new_project.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a clinical research project — edc_new_project","text":"Path project, invisibly.","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/edc_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Set global options for EDCimport — edc_options","title":"Set global options for EDCimport — edc_options","text":"Use function manage EDCimport parameters globally taking advantage autocompletion.  Use edc_peek_options() see option currently set edc_reset_options() set options back default.","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/edc_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set global options for EDCimport — edc_options","text":"","code":"edc_options(   ...,   trialmaster_pw,   path_7zip,   edc_lookup,   edc_subjid_ref,   edc_plotly,   edc_fct_yesno,   edc_cols_subjid,   edc_cols_meta,   edc_cols_id,   edc_cols_crfname,   edc_meta_cols_pct,   edc_warn_max_subjid,   edc_read_verbose,   edc_correction_verbose,   edc_get_key_cols_verbose,   edc_lookup_overwrite_warn,   .local = FALSE )"},{"path":"https://danchaltiel.github.io/EDCimport/reference/edc_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set global options for EDCimport — edc_options","text":"... unused trialmaster_pw password trialmaster zip archive. instance, can use edc_options(trialmaster_pw=\"my_pwd\") console per session, write password clear R code path_7zip path 7zip executable. Default \"C:/Program Files/7-Zip/\". edc_lookup (Internal) reference lookup table (usually .lookup). usually changed manually. edc_subjid_ref used edc_warn_patient_diffs vector reference subject IDs. usually write edc_options(edc_subjid_ref=enrolres$subjid). edc_plotly used edc_swimmerplot whether use plotly visualize plot. edc_fct_yesno used fct_yesno list values considered Yes/values. Defaults get_yesno_lvl(). edc_cols_subjid, edc_cols_meta used get_key_cols name columns holding subject id (default c(\"ptno\", \"subjid\")) CRF form name (default c(\"crfname\")). case-insensitive. edc_cols_id, edc_cols_crfname deprecated edc_meta_cols_pct minimal proportion datasets column reach considered \"meta\" edc_warn_max_subjid max number subject IDs show edc_data_warn edc_read_verbose, edc_correction_verbose, edc_get_key_cols_verbose verbosity output functions read_trialmaster read_tm_all_xpt, manual_correction, get_key_cols. example, set edc_options(edc_read_verbose=0) silence first 2. edc_lookup_overwrite_warn default TRUE. Whether warning overwriting .lookup (like reading 2 databases successively) .local TRUE, effect apply local frame (internally using rlang::local_options())","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/edc_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set global options for EDCimport — edc_options","text":"Nothing, called side effects","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/edc_peek_options.html","id":null,"dir":"Reference","previous_headings":"","what":"See which EDCimport option is currently set. — edc_peek_options","title":"See which EDCimport option is currently set. — edc_peek_options","text":"See EDCimport option currently set.","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/edc_peek_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"See which EDCimport option is currently set. — edc_peek_options","text":"","code":"edc_peek_options(keep_null = FALSE)"},{"path":"https://danchaltiel.github.io/EDCimport/reference/edc_peek_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"See which EDCimport option is currently set. — edc_peek_options","text":"keep_null set TRUE get list","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/edc_peek_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"See which EDCimport option is currently set. — edc_peek_options","text":"named list EDCimport options","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/edc_population_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the populations — edc_population_plot","title":"Plot the populations — edc_population_plot","text":"RCT, usually several populations analysis, function allow show patient population graphically.","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/edc_population_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the populations — edc_population_plot","text":"","code":"edc_population_plot(x, id_per_row = 50, ref = \"first\")"},{"path":"https://danchaltiel.github.io/EDCimport/reference/edc_population_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the populations — edc_population_plot","text":"x named list subject ID. id_per_row number patients per rows. ref whole population. Default first member x.","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/edc_population_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the populations — edc_population_plot","text":"ggplot","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/edc_population_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the populations — edc_population_plot","text":"","code":"#in real word code, use filter and pull to get these vectors pop_total = c(1:180) %>% setdiff(55) #screen failure, no patient 55 pop_itt = pop_total %>% setdiff(10) #patient 10 has had the wrong treatment pop_safety = pop_total %>% setdiff(c(40,160)) #patients 40 and 160 didn't receive any treatment pop_m_itt = pop_total %>% setdiff(c(40,160,80)) #patient 80 had a wrong inclusion criterion pop_evaluable = pop_total %>% setdiff(c(40,160,101,147,186)) #patients with no recist evaluation  l = list(   \"Total population\"=pop_total,   \"ITT population\"=pop_itt,   \"Safety population\"=pop_safety,   \"mITT population\"=pop_m_itt,   \"Evaluable population\"=pop_evaluable ) edc_population_plot(l)  edc_population_plot(l[-1], ref=pop_total)  edc_population_plot(l, ref=1:200)  edc_population_plot(l, id_per_row=60)"},{"path":"https://danchaltiel.github.io/EDCimport/reference/edc_reset_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Reset all EDCimport options. — edc_reset_options","title":"Reset all EDCimport options. — edc_reset_options","text":"Reset EDCimport options.","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/edc_reset_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reset all EDCimport options. — edc_reset_options","text":"","code":"edc_reset_options(   except = c(\"edc_lookup\", \"trialmaster_pw\", \"path_7zip\"),   quiet = FALSE )"},{"path":"https://danchaltiel.github.io/EDCimport/reference/edc_reset_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reset all EDCimport options. — edc_reset_options","text":"except options reset default quiet set TRUE remove message.","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/edc_reset_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reset all EDCimport options. — edc_reset_options","text":"Nothing, called side effects","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/edc_swimmerplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Swimmer plot of all dates columns — edc_swimmerplot","title":"Swimmer plot of all dates columns — edc_swimmerplot","text":"Join tables .lookup$dataset id","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/edc_swimmerplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Swimmer plot of all dates columns — edc_swimmerplot","text":"","code":"edc_swimmerplot(   .lookup = get_lookup(),   ...,   id = get_subjid_cols(),   group = NULL,   origin = NULL,   id_lim = NULL,   exclude = NULL,   time_unit = c(\"days\", \"weeks\", \"months\", \"years\"),   aes_color = c(\"variable\", \"label\"),   plotly = getOption(\"edc_plotly\", FALSE) )"},{"path":"https://danchaltiel.github.io/EDCimport/reference/edc_swimmerplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Swimmer plot of all dates columns — edc_swimmerplot","text":".lookup lookup table, default get_lookup() ... used id patient identifier. coerced numeric. group grouping variable, given \"dataset$column\" origin variable consider time 0, given \"dataset$column\" id_lim numeric vector length 2 providing minimum maximum id subset . exclude character vector variables exclude, form dataset$column. Can regex, $ symbols count. Case-insensitive. time_unit origin!=NULL, unit measure time. One c(\"days\", \"weeks\", \"months\", \"years\"). aes_color either variable (\"{dataset} - {column}\") label (column label) plotly whether use {plotly} get interactive plot","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/edc_swimmerplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Swimmer plot of all dates columns — edc_swimmerplot","text":"either plotly ggplot","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/edc_swimmerplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Swimmer plot of all dates columns — edc_swimmerplot","text":"","code":"#tm = read_trialmaster(\"filename.zip\", pw=\"xx\") tm = edc_example_plot() #> Warning: Option \"edc_lookup\" has been overwritten. load_list(tm) p = edc_swimmerplot(.lookup, id_lim=c(5,45)) p2 = edc_swimmerplot(.lookup, origin=\"db0$date_naissance\", time_unit=\"weeks\",                       exclude=c(\"DB1$DATE2\", \"db3$.*\")) p3 = edc_swimmerplot(.lookup, group=\"db0$group\", aes_color=\"label\") if (FALSE) { # \\dontrun{ #save the plotly plot as HTML to share it save_plotly(p, \"edc_swimmerplot.html\") } # }"},{"path":"https://danchaltiel.github.io/EDCimport/reference/edc_warn_extraction_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Warn if extraction is too old — edc_warn_extraction_date","title":"Warn if extraction is too old — edc_warn_extraction_date","text":"Warn extraction old","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/edc_warn_extraction_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Warn if extraction is too old — edc_warn_extraction_date","text":"","code":"edc_warn_extraction_date(max_days = 30)"},{"path":"https://danchaltiel.github.io/EDCimport/reference/edc_warn_extraction_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Warn if extraction is too old — edc_warn_extraction_date","text":"max_days max acceptable age data","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/edc_warn_extraction_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Warn if extraction is too old — edc_warn_extraction_date","text":"nothing","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/edc_warn_extraction_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Warn if extraction is too old — edc_warn_extraction_date","text":"","code":"tm = edc_example() #> Warning: Option \"edc_lookup\" has been overwritten. load_list(tm) edc_warn_extraction_date() #> Error in edc_warn_extraction_date(): object 'datetime_extraction' not found"},{"path":"https://danchaltiel.github.io/EDCimport/reference/edc_warn_patient_diffs.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the validity of the subject ID column — edc_warn_patient_diffs","title":"Check the validity of the subject ID column — edc_warn_patient_diffs","text":"Compare subject ID vector study's reference subject ID (usually something like enrolres$subjid), warn patient missing extra. check_subjid() old, deprecated name.","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/edc_warn_patient_diffs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the validity of the subject ID column — edc_warn_patient_diffs","text":"","code":"edc_warn_patient_diffs(   x,   ref = getOption(\"edc_subjid_ref\"),   issue_n = \"xx\",   data_name = NULL,   col_subjid = get_subjid_cols() )"},{"path":"https://danchaltiel.github.io/EDCimport/reference/edc_warn_patient_diffs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the validity of the subject ID column — edc_warn_patient_diffs","text":"x subject ID vector check, dataframe ID column guessed ref reference subject ID. usually set edc_options(edc_subjid_ref=xxx). See example. issue_n identifying row number data_name name data (warning message) col_subjid name subject ID column x dataframe.","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/edc_warn_patient_diffs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the validity of the subject ID column — edc_warn_patient_diffs","text":"nothing, called errors/warnings","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/edc_warn_patient_diffs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check the validity of the subject ID column — edc_warn_patient_diffs","text":"","code":"tm = edc_example() #> Warning: Option \"edc_lookup\" has been overwritten. load_list(tm) options(edc_subjid_ref=db0$SUBJID) #usually, you set something like: #options(edc_subjid_ref=enrolres$subjid) edc_warn_patient_diffs(db1) db1 %>% dplyr::filter(SUBJID>1) %>% edc_warn_patient_diffs() #> Warning: In `edc_warn_patient_diffs()`, `data_name` should not be NULL if `issue_n` is #> not NULL and function is piped, otherwise the message will be unreadable. #> Warning: Issue #xx: `.` has patient discrepancies: #> ℹ Missing: 1 patient: #1 edc_warn_patient_diffs(c(db1$SUBJID, 99, 999)) #> Warning: Issue #xx: `c(db1$SUBJID, 99, 999)` has patient discrepancies: #> ℹ Extra: 2 patients: #99 and #999"},{"path":"https://danchaltiel.github.io/EDCimport/reference/extend_lookup.html","id":null,"dir":"Reference","previous_headings":"","what":"Extend the lookup table — extend_lookup","title":"Extend the lookup table — extend_lookup","text":"utility extends lookup table include: n_id number patients present dataset rows_per_id mean number row per patient crfname actual name dataset","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/extend_lookup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extend the lookup table — extend_lookup","text":"","code":"extend_lookup(   lookup,   ...,   id_cols = get_subjid_cols(lookup),   crf_cols = get_crfname_cols(lookup),   datasets = get_datasets(lookup, envir = parent.frame()) )"},{"path":"https://danchaltiel.github.io/EDCimport/reference/extend_lookup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extend the lookup table — extend_lookup","text":"lookup [data.frame(1)] lookup table ... unused id_cols, crf_cols [character(n)] experts datasets [data.frame(n)] experts ","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/extend_lookup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extend the lookup table — extend_lookup","text":"lookup, extended","code":""},{"path":[]},{"path":"https://danchaltiel.github.io/EDCimport/reference/extend_lookup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extend the lookup table — extend_lookup","text":"","code":"#tm = read_trialmaster(\"filename.zip\", pw=\"xx\") tm = edc_example_mixed() #> Warning: Option \"edc_lookup\" has been overwritten. load_list(tm) .lookup #> ── Lookup table  ─────────────────────────────────────────────────────────────── #>   dataset     nrow  ncol #>   <chr>      <dbl> <dbl> #> 1 short        100     4 #> 2 long_mixed   200     5 #> 3 long_pure    300     4 .lookup = extend_lookup(.lookup) .lookup #> ── Lookup table  ─────────────────────────────────────────────────────────────── #>   dataset     nrow  ncol  n_id rows_per_id crfname    #>   <chr>      <dbl> <dbl> <int>       <dbl> <chr>      #> 1 long_pure    300     4   100           3 long_pure  #> 2 long_mixed   200     5   100           2 long_mixed #> 3 short        100     4   100           1 short"},{"path":"https://danchaltiel.github.io/EDCimport/reference/fct_yesno.html","id":null,"dir":"Reference","previous_headings":"","what":"Format factor levels as Yes/No — fct_yesno","title":"Format factor levels as Yes/No — fct_yesno","text":"Format factor levels arbitrary values Yes/(Yes always first) leaving untouched vectors contain information.","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/fct_yesno.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format factor levels as Yes/No — fct_yesno","text":"","code":"fct_yesno(   x,   input = list(yes = c(\"Yes\", \"Oui\"), no = c(\"No\", \"Non\")),   output = c(\"Yes\", \"No\"),   strict = FALSE,   mutate_character = TRUE,   fail = TRUE )"},{"path":"https://danchaltiel.github.io/EDCimport/reference/fct_yesno.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format factor levels as Yes/No — fct_yesno","text":"x vector type/class. input list values considered \"yes\" \"\". output output factor levels. strict whether match input strictly use stringr::str_detect find . mutate_character whether turn characters factor. fail whether fail levels recoded yes/.","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/fct_yesno.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format factor levels as Yes/No — fct_yesno","text":"factor, x untouched.","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/fct_yesno.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format factor levels as Yes/No — fct_yesno","text":"","code":"fct_yesno(c(\"No\", \"Yes\")) #levels are in order #> [1] No  Yes #> Levels: Yes No  set.seed(42) N=6 x = tibble(   a=sample(c(\"Yes\", \"No\"), size=N, replace=TRUE),   b=sample(c(\"Oui\", \"Non\"), size=N, replace=TRUE),   c=sample(0:1, size=N, replace=TRUE),   d=sample(c(TRUE, FALSE), size=N, replace=TRUE),   e=sample(c(\"1-Yes\", \"0-No\"), size=N, replace=TRUE),      y=sample(c(\"aaa\", \"bbb\", \"ccc\"), size=N, replace=TRUE),   z=1:N, )   x           #> # A tibble: 6 × 7 #>   a     b         c d     e     y         z #>   <chr> <chr> <int> <lgl> <chr> <chr> <int> #> 1 Yes   Non       0 FALSE 1-Yes bbb       1 #> 2 Yes   Non       1 FALSE 0-No  ccc       2 #> 3 Yes   Oui       0 TRUE  1-Yes bbb       3 #> 4 Yes   Non       0 TRUE  1-Yes aaa       4 #> 5 No    Oui       1 TRUE  1-Yes bbb       5 #> 6 No    Non       1 TRUE  1-Yes bbb       6 #y and z are left untouched (or throw an error if fail=TRUE)    mutate_all(x, fct_yesno, fail=FALSE) #> # A tibble: 6 × 7 #>   a     b     c     d     e     y         z #>   <fct> <fct> <fct> <fct> <fct> <chr> <int> #> 1 Yes   No    No    No    Yes   bbb       1 #> 2 Yes   No    Yes   No    No    ccc       2 #> 3 Yes   Yes   No    Yes   Yes   bbb       3 #> 4 Yes   No    No    Yes   Yes   aaa       4 #> 5 No    Yes   Yes   Yes   Yes   bbb       5 #> 6 No    No    Yes   Yes   Yes   bbb       6  # as \"1-Yes\" is not in `input`, x$e is untouched/fails if strict=TRUE fct_yesno(x$e) #> [1] Yes No  Yes Yes Yes Yes #> Levels: Yes No fct_yesno(x$e, strict=TRUE, fail=FALSE)  #> [1] \"1-Yes\" \"0-No\"  \"1-Yes\" \"1-Yes\" \"1-Yes\" \"1-Yes\" fct_yesno(x$e, output=c(\"Ja\", \"Nein\")) #> [1] Ja   Nein Ja   Ja   Ja   Ja   #> Levels: Ja Nein"},{"path":"https://danchaltiel.github.io/EDCimport/reference/find_keyword.html","id":null,"dir":"Reference","previous_headings":"","what":"Find a keyword in the whole database — find_keyword","title":"Find a keyword in the whole database — find_keyword","text":"Find keyword names labels list datasets.","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/find_keyword.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find a keyword in the whole database — find_keyword","text":"","code":"find_keyword(keyword, data = get_lookup(), ignore_case = TRUE)"},{"path":"https://danchaltiel.github.io/EDCimport/reference/find_keyword.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find a keyword in the whole database — find_keyword","text":"keyword keyword search . Can handle regular expressions (see examples). data lookup dataframe search keyword. Can set using edc_options(edc_lookup=my_data), done automatically calling read_trialmaster(). ignore_case case differences ignored match? Default TRUE.","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/find_keyword.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find a keyword in the whole database — find_keyword","text":"tibble","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/find_keyword.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find a keyword in the whole database — find_keyword","text":"","code":"if (FALSE) { # \\dontrun{ path = system.file(\"extdata/Example_Export_SAS_XPORT_2022_08_25_15_16.zip\",                     package=\"EDCimport\", mustWork=TRUE) w = read_trialmaster(path, verbose=FALSE)  find_keyword(\"patient\")  #with regex find_keyword(\"patient$\") find_keyword(\"\\\\d\") find_keyword(\"(Trial|Form) Name\") find_keyword(\"\\\\(\") #you need to escape special characters } # }"},{"path":"https://danchaltiel.github.io/EDCimport/reference/get_common_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Get columns that are common to multiple datasets — get_common_cols","title":"Get columns that are common to multiple datasets — get_common_cols","text":"Attempt list columns database group ones common datasets. Useful find keys pivot summarise data.","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/get_common_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get columns that are common to multiple datasets — get_common_cols","text":"","code":"get_common_cols(lookup = get_lookup(), min_datasets = 3)  # S3 method for class 'common_cols' summary(object, ...)"},{"path":"https://danchaltiel.github.io/EDCimport/reference/get_common_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get columns that are common to multiple datasets — get_common_cols","text":"lookup lookup table, default get_lookup() min_datasets minimal number datasets considered object object class \"common_cols\" ... unused","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/get_common_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get columns that are common to multiple datasets — get_common_cols","text":"tibble class \"common_cols\"","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/get_common_cols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get columns that are common to multiple datasets — get_common_cols","text":"","code":"tm = edc_example() #> Warning: Option \"edc_lookup\" has been overwritten. load_list(tm) x = get_common_cols(min_datasets=1) x #> # A tibble: 16 × 7 #>    column      name_in datasets n_datasets pct_datasets datasets_in datasets_out #>    <chr>       <list>  <list>        <int>        <dbl> <chr>       <chr>        #>  1 SUBJID      <lgl>   <chr>             4         1    db0, db2, … \"\"           #>  2 crfname     <lgl>   <chr>             4         1    db0, db2, … \"\"           #>  3 age         <lgl>   <chr>             1         0.25 db0         \"db2, db3, … #>  4 date1       <lgl>   <chr>             1         0.25 db1         \"db0, db2, … #>  5 date10      <lgl>   <chr>             1         0.25 db3         \"db0, db2, … #>  6 date2       <lgl>   <chr>             1         0.25 db1         \"db0, db2, … #>  7 date3       <lgl>   <chr>             1         0.25 db1         \"db0, db2, … #>  8 date4       <lgl>   <chr>             1         0.25 db2         \"db0, db3, … #>  9 date5       <lgl>   <chr>             1         0.25 db2         \"db0, db3, … #> 10 date6       <lgl>   <chr>             1         0.25 db2         \"db0, db3, … #> 11 date7       <lgl>   <chr>             1         0.25 db3         \"db0, db2, … #> 12 date8       <lgl>   <chr>             1         0.25 db3         \"db0, db2, … #> 13 date9       <lgl>   <chr>             1         0.25 db3         \"db0, db2, … #> 14 date_naiss… <lgl>   <chr>             1         0.25 db0         \"db2, db3, … #> 15 group       <lgl>   <chr>             1         0.25 db0         \"db2, db3, … #> 16 x           <lgl>   <chr>             1         0.25 db1         \"db0, db2, … summary(x) #> # A tibble: 2 × 7 #>   pct_datasets n_datasets n_distinct_datasets n_columns columns    datasets    #>   <chr>             <int>               <int>     <int> <list>     <list>      #> 1 100%                  4                   1         2 <chr [2]>  <list [2]>  #> 2 25%                   1                   4        14 <chr [14]> <list [14]> #> # ℹ 1 more variable: columns_str <chr>"},{"path":"https://danchaltiel.github.io/EDCimport/reference/get_datasets.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the datasets as a list of data.frames — get_datasets","title":"Retrieve the datasets as a list of data.frames — get_datasets","text":"Get datasets lookup table list data.frames.","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/get_datasets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the datasets as a list of data.frames — get_datasets","text":"","code":"get_datasets(lookup = get_lookup(), envir = parent.frame())"},{"path":"https://danchaltiel.github.io/EDCimport/reference/get_datasets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve the datasets as a list of data.frames — get_datasets","text":"lookup lookup table envir (internal use)","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/get_datasets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve the datasets as a list of data.frames — get_datasets","text":"list datasets","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/get_key_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Important column names — get_key_cols","title":"Important column names — get_key_cols","text":"Retrieve names patient_id (usually \"SUBJID\" \"PATNO\") crfname (usually \"CRFNAME\") actual names datasets","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/get_key_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Important column names — get_key_cols","text":"","code":"get_key_cols(lookup = get_lookup())"},{"path":"https://danchaltiel.github.io/EDCimport/reference/get_key_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Important column names — get_key_cols","text":"lookup lookup table","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/get_key_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Important column names — get_key_cols","text":"list(2) characters names patient_id crfname","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/get_meta_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Get columns shared by most datasets — get_meta_cols","title":"Get columns shared by most datasets — get_meta_cols","text":"trialmaster exports, many datasets share certain amount columns containing meta-data often irrelevant point. function identifies columns present least 95% datasets (default)","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/get_meta_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get columns shared by most datasets — get_meta_cols","text":"","code":"get_meta_cols(min_pct = getOption(\"edc_meta_cols_pct\", 0.95))"},{"path":"https://danchaltiel.github.io/EDCimport/reference/get_meta_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get columns shared by most datasets — get_meta_cols","text":"min_pct Default=0.95. minimal proportion datasets column reach. Subject ID always excluded.","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/get_meta_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get columns shared by most datasets — get_meta_cols","text":"character vector","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/get_meta_cols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get columns shared by most datasets — get_meta_cols","text":"","code":"tm = edc_example_mixed() #> Warning: Option \"edc_lookup\" has been overwritten. load_list(tm) meta_cols = get_meta_cols() long_mixed %>% dplyr::select(-dplyr::any_of(meta_cols)) #> # A tibble: 200 × 4 #>    SUBJID  val1b val2b val3b #>     <int>  <dbl> <dbl> <chr> #>  1      1  0.689 12.3  B     #>  2      1  0.725 10.5  B     #>  3      2  0.217 11.0  C     #>  4      2 -0.202 10.4  C     #>  5      3 -1.37   9.00 D     #>  6      3 -0.309  9.40 D     #>  7      4 -0.453 10.2  E     #>  8      4  0.663  7.07 E     #>  9      5  1.31   9.15 F     #> 10      5  0.501 10.8  F     #> # ℹ 190 more rows"},{"path":"https://danchaltiel.github.io/EDCimport/reference/get_subjid_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Get key column names — get_subjid_cols","title":"Get key column names — get_subjid_cols","text":"Retrieve names patient ID CRF name actual names datasets, without respect case. Default values set options.","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/get_subjid_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get key column names — get_subjid_cols","text":"","code":"get_subjid_cols(lookup = get_lookup())  get_crfname_cols(lookup = get_lookup())"},{"path":"https://danchaltiel.github.io/EDCimport/reference/get_subjid_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get key column names — get_subjid_cols","text":"lookup lookup table","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/get_subjid_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get key column names — get_subjid_cols","text":"character vector","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/get_subjid_cols.html","id":"options","dir":"Reference","previous_headings":"","what":"options","title":"Get key column names — get_subjid_cols","text":"Use edc_options() set default values: edc_cols_subjid defaults c(\"PTNO\", \"SUBJID\") edc_cols_crfname defaults c(\"CRFNAME\")","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/get_subjid_cols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get key column names — get_subjid_cols","text":"","code":"get_subjid_cols() #> [1] \"SUBJID\" get_crfname_cols() #> [1] \"crfname\""},{"path":"https://danchaltiel.github.io/EDCimport/reference/lastnews_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a table with the latest date for each patient — lastnews_table","title":"Get a table with the latest date for each patient — lastnews_table","text":"function search date columns every tables returns latest date patient variable comes . Useful survival analysis get right censoring time.","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/lastnews_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a table with the latest date for each patient — lastnews_table","text":"","code":"lastnews_table(   except = NULL,   with_ties = FALSE,   numeric_id = TRUE,   warn_if_future = TRUE )"},{"path":"https://danchaltiel.github.io/EDCimport/reference/lastnews_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a table with the latest date for each patient — lastnews_table","text":"except datasets/columns searched. Example: scheduled visit patient may died attending considered. with_ties case tie, whether return first origin (FALSE) origins share tie (TRUE). numeric_id set FALSE patient ID column numeric warn_if_future whether show warning dates extraction date","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/lastnews_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a table with the latest date for each patient — lastnews_table","text":"dataframe","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/lastnews_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a table with the latest date for each patient — lastnews_table","text":"","code":"tm = edc_example_plot() #> Warning: Option \"edc_lookup\" has been overwritten. load_list(tm) lastnews_table() #> Error in map2(.x, vec_index(.x), .f, ...): ℹ In index: 1. #> ℹ With name: db0. #> Caused by error in `mutate()`: #> ℹ In argument: `label = unlist(get_label(.x)[name])`. #> Caused by error in `map2()`: #> ! could not find function \"map2\" lastnews_table(except=\"db3\") #> Error in map2(.x, vec_index(.x), .f, ...): ℹ In index: 1. #> ℹ With name: db0. #> Caused by error in `mutate()`: #> ℹ In argument: `label = unlist(get_label(.x)[name])`. #> Caused by error in `map2()`: #> ! could not find function \"map2\" lastnews_table(except=\"db3$date9\") #> Error in map2(.x, vec_index(.x), .f, ...): ℹ In index: 1. #> ℹ With name: db0. #> Caused by error in `mutate()`: #> ℹ In argument: `label = unlist(get_label(.x)[name])`. #> Caused by error in `map2()`: #> ! could not find function \"map2\""},{"path":"https://danchaltiel.github.io/EDCimport/reference/load_as_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Load a .RData file as a list — load_as_list","title":"Load a .RData file as a list — load_as_list","text":"Instead loading .RData file global environment, extract every object list.","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/load_as_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load a .RData file as a list — load_as_list","text":"","code":"load_as_list(filename)"},{"path":"https://danchaltiel.github.io/EDCimport/reference/load_as_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load a .RData file as a list — load_as_list","text":"filename filename, .RData extension.","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/load_as_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load a .RData file as a list — load_as_list","text":"list","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/load_as_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load a .RData file as a list — load_as_list","text":"","code":"x = list(a=1, b=mtcars) save_list(x, \"test.RData\") y = load_as_list(\"test.RData\") print(y$a) #> [1] 1"},{"path":"https://danchaltiel.github.io/EDCimport/reference/load_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Load a list in an environment — load_list","title":"Load a list in an environment — load_list","text":"Load list environment","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/load_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load a list in an environment — load_list","text":"","code":"load_list(x, env = parent.frame(), remove = TRUE)"},{"path":"https://danchaltiel.github.io/EDCimport/reference/load_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load a list in an environment — load_list","text":"x list env environment onto list loaded remove TRUE, x removed environment afterward","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/load_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load a list in an environment — load_list","text":"nothing, called side-effect","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/load_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load a list in an environment — load_list","text":"","code":"x=list(a=1, b=mtcars) load_list(x, remove=FALSE) print(a) #> [1] 1 print(nrow(b)) #> [1] 32"},{"path":"https://danchaltiel.github.io/EDCimport/reference/manual_correction.html","id":null,"dir":"Reference","previous_headings":"","what":"Manual correction — manual_correction","title":"Manual correction — manual_correction","text":"finding wrong unexpected values exported dataset, can useful temporarily correct hard-coding value. However, manual correction undone soon central database updated correction. manual_correction() applies correction specific dataset column location throws error correction already place. check applies per R session can source script without errors. reset_manual_correction() resets checks. instance, called read_trialmaster().","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/manual_correction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manual correction — manual_correction","text":"","code":"manual_correction(   data,   col,   rows,   wrong,   correct,   verbose = getOption(\"edc_correction_verbose\", TRUE) )  reset_manual_correction()"},{"path":"https://danchaltiel.github.io/EDCimport/reference/manual_correction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manual correction — manual_correction","text":"data, col, rows rows column dataframe error lies wrong actual wrong value correct temporary correction value verbose whether print informations ()","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/manual_correction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Manual correction — manual_correction","text":"Nothing, used side effects","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/manual_correction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Manual correction — manual_correction","text":"","code":"library(dplyr) x = iris %>% mutate(id=row_number(), .before=1) %>% as_tibble() x$Sepal.Length[c(1,3,5)] #> [1] 5.1 4.7 5.0  #1st correction is silent manual_correction(x, Sepal.Length, rows=c(1,3,5),                   wrong=c(5.1, 4.7, 5.0), correct=c(5, 4, 3)) #> Manual correction of \"x$Sepal.Length\": #> ℹ Old: 5.1, 4.7, and 5 #> ℹ New: 5, 4, and 3 x$Sepal.Length[c(1,3,5)] #> [1] 5 4 3  #further correction is silent manual_correction(x, Sepal.Length, rows=c(1,3,5),                   wrong=c(5.1, 4.7, 5.0), correct=c(5, 4, 3))                     #if the database is corrected, an error is thrown if (FALSE) { # \\dontrun{ reset_manual_correction() x$Sepal.Length[c(1,3,5)] = c(5, 4, 3) #mimics db correction manual_correction(x, Sepal.Length, rows=c(1,3,5),                   wrong=c(5.1, 4.7, 5.0), correct=c(5, 4, 3)) } # }"},{"path":"https://danchaltiel.github.io/EDCimport/reference/read_all_xpt.html","id":null,"dir":"Reference","previous_headings":"","what":"Read all .xpt files in a directory — read_all_xpt","title":"Read all .xpt files in a directory — read_all_xpt","text":"Read .xpt files directory (unzipped TrialMaster archive).  7zip installed, probably rather use read_trialmaster() instead.  procformat.sas file exists directory, formats applied.","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/read_all_xpt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read all .xpt files in a directory — read_all_xpt","text":"","code":"read_all_xpt(   directory,   ...,   format_file = \"procformat.sas\",   clean_names_fun = NULL,   split_mixed = FALSE,   extend_lookup = TRUE,   datetime_extraction = NULL,   verbose = getOption(\"edc_read_verbose\", 1),   key_columns = \"deprecated\" )"},{"path":"https://danchaltiel.github.io/EDCimport/reference/read_all_xpt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read all .xpt files in a directory — read_all_xpt","text":"directory [character(1)] path unzipped archive using SAS_XPORT format. read extraction date directory name. ... unused format_file [character(1)] path procformat.sas file used apply formats. Use NULL apply formats. clean_names_fun [function] function clean column names, e.g. tolower, janitor::clean_names(),... split_mixed [logical(1): FALSE] whether split mixed datasets. See split_mixed_datasets. extend_lookup [character(1): FALSE] whether enrich lookup table. See extend_lookup. datetime_extraction [POSIXt(1)] datetime data extraction. Default common date last modification directory. verbose [logical(1)] one c(0, 1, 2). higher, information printed. key_columns deprecated","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/read_all_xpt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read all .xpt files in a directory — read_all_xpt","text":"list containing one dataframe .xpt file folder, extraction date (datetime_extraction), summary imported tables (.lookup). set yet, option edc_lookup automatically set .lookup.","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/read_trialmaster.html","id":null,"dir":"Reference","previous_headings":"","what":"Read the .zip archive of a TrialMaster export — read_trialmaster","title":"Read the .zip archive of a TrialMaster export — read_trialmaster","text":"Import .zip archive TrialMaster trial export list dataframes. archive filename leaved untouched contains project name date extraction.  Generate .rds cache file future reads.  7zip installed available, use read_tm_all_xpt() instead.","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/read_trialmaster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read the .zip archive of a TrialMaster export — read_trialmaster","text":"","code":"read_trialmaster(   archive,   ...,   use_cache = \"write\",   clean_names_fun = NULL,   split_mixed = FALSE,   extend_lookup = TRUE,   pw = getOption(\"trialmaster_pw\"),   verbose = getOption(\"edc_read_verbose\", 1),   key_columns = \"deprecated\" )"},{"path":"https://danchaltiel.github.io/EDCimport/reference/read_trialmaster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read the .zip archive of a TrialMaster export — read_trialmaster","text":"archive [character(1)] path archive ... unused use_cache [mixed(1): \"write\"] controls .rds cache. TRUE, read cache extract archive create cache. FALSE extract archive without creating cache file. Can also \"read\" \"write\". clean_names_fun [function] function clean column names, e.g. tolower, janitor::clean_names(),... split_mixed [logical(1): FALSE] whether split mixed datasets. See split_mixed_datasets. extend_lookup [character(1): FALSE] whether enrich lookup table. See extend_lookup. pw [character(1)] password archive protected. avoid writing passwords plain text, probably better use options(trialmaster_pw=\"xxx\") instead though. verbose [logical(1)] one c(0, 1, 2). higher, information printed. key_columns deprecated","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/read_trialmaster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read the .zip archive of a TrialMaster export — read_trialmaster","text":"list containing one dataframe .xpt file folder, extraction date (datetime_extraction), summary imported tables (.lookup). set yet, option edc_lookup automatically set .lookup.","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. dplyr %>% tibble tibble","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/save_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Save a list as .RData file — save_list","title":"Save a list as .RData file — save_list","text":"Save list .RData file","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/save_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save a list as .RData file — save_list","text":"","code":"save_list(x, filename)"},{"path":"https://danchaltiel.github.io/EDCimport/reference/save_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save a list as .RData file — save_list","text":"x list filename filename, .RData extension.","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/save_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save a list as .RData file — save_list","text":"nothing, called side-effect","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/save_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save a list as .RData file — save_list","text":"","code":"x=list(a=1, b=mtcars) save_list(x, \"test.RData\") load(\"test.RData\") file.remove(\"test.RData\") #> [1] TRUE print(a) #> [1] 1 print(nrow(b)) #> [1] 32"},{"path":"https://danchaltiel.github.io/EDCimport/reference/save_plotly.html","id":null,"dir":"Reference","previous_headings":"","what":"Save a plotly to an HTML file — save_plotly","title":"Save a plotly to an HTML file — save_plotly","text":"Save plotly HTML file","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/save_plotly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save a plotly to an HTML file — save_plotly","text":"","code":"save_plotly(p, file, ...)"},{"path":"https://danchaltiel.github.io/EDCimport/reference/save_plotly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save a plotly to an HTML file — save_plotly","text":"p plot object (plotly ggplot) file file path save HTML file ... passed htmlwidgets::saveWidget","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/save_plotly.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save a plotly to an HTML file — save_plotly","text":"","code":"if (FALSE) { # \\dontrun{ tm = edc_example_plot() p = edc_swimmerplot(tm$.lookup, id_lim=c(5,45)) save_plotly(p, \"graph/swimplots/edc_swimmerplot.html\", title=\"My Swimmerplot\") } # }"},{"path":"https://danchaltiel.github.io/EDCimport/reference/save_sessioninfo.html","id":null,"dir":"Reference","previous_headings":"","what":"Save sessionInfo() output — save_sessioninfo","title":"Save sessionInfo() output — save_sessioninfo","text":"Save sessionInfo() output text file.","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/save_sessioninfo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save sessionInfo() output — save_sessioninfo","text":"","code":"save_sessioninfo(path = \"check/session_info.txt\", with_date = TRUE)"},{"path":"https://danchaltiel.github.io/EDCimport/reference/save_sessioninfo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save sessionInfo() output — save_sessioninfo","text":"path target path write file with_date whether insert date file extension","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/save_sessioninfo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save sessionInfo() output — save_sessioninfo","text":"nothing","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/save_sessioninfo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save sessionInfo() output — save_sessioninfo","text":"","code":"save_sessioninfo()"},{"path":"https://danchaltiel.github.io/EDCimport/reference/search_for_newer_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Search for newer data — search_for_newer_data","title":"Search for newer data — search_for_newer_data","text":"Search folders TrialMaster database recent current extration present. default, search \"data\" folder OS usual \"Downloads\" folder. newer database found, user asked want move \"data\" folder.","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/search_for_newer_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search for newer data — search_for_newer_data","text":"","code":"search_for_newer_data(   archive,   ...,   source = path_home(\"Downloads\"),   target = \"data\",   ask = TRUE,   advice = TRUE )"},{"path":"https://danchaltiel.github.io/EDCimport/reference/search_for_newer_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search for newer data — search_for_newer_data","text":"source path vector searched, default \"data\" usual \"Downloads\" folder target path files copied ask whether ask user move file \"data\" advice whether advice move instead, ask==FALSE project archive path, giving project name","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/search_for_newer_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search for newer data — search_for_newer_data","text":"path newer file, invisibly.","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/search_for_newer_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search for newer data — search_for_newer_data","text":"","code":"if (FALSE) { # \\dontrun{  } # }"},{"path":"https://danchaltiel.github.io/EDCimport/reference/split_mixed_datasets.html","id":null,"dir":"Reference","previous_headings":"","what":"Split mixed datasets — split_mixed_datasets","title":"Split mixed datasets — split_mixed_datasets","text":"Split mixed tables, .e. tables hold long data (N values per patient) short data (one value per patient, duplicated N lines), one long table one short table.","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/split_mixed_datasets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split mixed datasets — split_mixed_datasets","text":"","code":"split_mixed_datasets(   datasets = get_datasets(),   id = get_subjid_cols(),   ...,   ignore_cols = get_meta_cols(0.95),   output_code = FALSE,   verbose = TRUE )"},{"path":"https://danchaltiel.github.io/EDCimport/reference/split_mixed_datasets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split mixed datasets — split_mixed_datasets","text":"datasets dataframe list dataframes split. Default datasets .lookup. id patient identifier, probably \"SUBJID\". shared datasets. Case-insensitive. ... used ignore_cols columns ignore considering table long. Default getOption(\"edc_cols_crfname\", \"CRFNAME\"). Case-insensitive. output_code whether print code explicitly write. Can also file path. verbose whether print informations process.","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/split_mixed_datasets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split mixed datasets — split_mixed_datasets","text":"list new long short tables. Use load_list() load global environment.","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/split_mixed_datasets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split mixed datasets — split_mixed_datasets","text":"","code":"#tm = read_trialmaster(\"filename.zip\", pw=\"xx\") tm = edc_example_mixed() #> Warning: Option \"edc_lookup\" has been overwritten. names(tm) #> [1] \"short\"               \"long_pure\"           \"long_mixed\"          #> [4] \"date_extraction\"     \"datetime_extraction\" \".lookup\"             #load_list(tm) print(tm$long_mixed) #`val1` and `val2` are long but `val3` is short #> # A tibble: 200 × 5 #>    SUBJID crfname     val1b val2b val3b #>     <int> <chr>       <dbl> <dbl> <chr> #>  1      1 long_mixed  0.689 12.3  B     #>  2      1 long_mixed  0.725 10.5  B     #>  3      2 long_mixed  0.217 11.0  C     #>  4      2 long_mixed -0.202 10.4  C     #>  5      3 long_mixed -1.37   9.00 D     #>  6      3 long_mixed -0.309  9.40 D     #>  7      4 long_mixed -0.453 10.2  E     #>  8      4 long_mixed  0.663  7.07 E     #>  9      5 long_mixed  1.31   9.15 F     #> 10      5 long_mixed  0.501 10.8  F     #> # ℹ 190 more rows  mixed_data = split_mixed_datasets(tm, id=\"subjid\", verbose=TRUE) #> ✔ There was 1 short table: #>   \"short\" #> ✔ There was 1 pure long table: #>   \"long_pure\" #> ✔ There was 1 mixed (short+long) table: #>   \"long_mixed\" #> → Use `EDCimport::load_list()` on the result to get separated long and short #>   data. load_list(mixed_data) print(long_mixed_short)  #> # A tibble: 100 × 3 #>    SUBJID crfname    val3b #>     <int> <chr>      <chr> #>  1      1 long_mixed B     #>  2      2 long_mixed C     #>  3      3 long_mixed D     #>  4      4 long_mixed E     #>  5      5 long_mixed F     #>  6      6 long_mixed G     #>  7      7 long_mixed H     #>  8      8 long_mixed I     #>  9      9 long_mixed J     #> 10     10 long_mixed K     #> # ℹ 90 more rows print(long_mixed_long)  #> # A tibble: 200 × 3 #>    SUBJID  val1b val2b #>     <int>  <dbl> <dbl> #>  1      1  0.689 12.3  #>  2      1  0.725 10.5  #>  3      2  0.217 11.0  #>  4      2 -0.202 10.4  #>  5      3 -1.37   9.00 #>  6      3 -0.309  9.40 #>  7      4 -0.453 10.2  #>  8      4  0.663  7.07 #>  9      5  1.31   9.15 #> 10      5  0.501 10.8  #> # ℹ 190 more rows  #alternatively, get the code and only use the datasets you need split_mixed_datasets(tm, id=\"SUBJID\", output_code=TRUE) #> ✔ There was 1 short table: #>   \"short\" #> ✔ There was 1 pure long table: #>   \"long_pure\" #> ✔ There was 1 mixed (short+long) table: #>   \"long_mixed\" #> → Copy the following code in your script to separate long and short data: #> ## `long_mixed` (dim=200x5) ----  #>  #> long_mixed_short = long_mixed %>%  #>   select(SUBJID, crfname, val3b) %>%  #>   group_by(SUBJID) %>%  #>   summarise(across(everything(), unify)) #dim=100x3  #>  #>  long_mixed_long = long_mixed %>%  #>   select(SUBJID, val1b, val2b) #dim=200x3  filename = tempfile(\"mixed_code\", fileext=\".R\") split_mixed_datasets(tm, id=\"SUBJID\", output_code=filename) #> ✔ There was 1 short table: #>   \"short\" #> ✔ There was 1 pure long table: #>   \"long_pure\" #> ✔ There was 1 mixed (short+long) table: #>   \"long_mixed\" #> → Copy the code from /tmp/RtmpzC9SHR/mixed_code18c2712a364a.R in your script to #>   separate long and short data: #>   `utils::browseURL(/tmp/RtmpzC9SHR/mixed_code18c2712a364a.R)` readLines(filename) #> [1] \"## `long_mixed` (dim=200x5) ---- \"                    #> [2] \"\"                                                     #> [3] \"long_mixed_short = long_mixed %>% \"                   #> [4] \"  select(SUBJID, crfname, val3b) %>% \"                #> [5] \"  group_by(SUBJID) %>% \"                              #> [6] \"  summarise(across(everything(), unify)) #dim=100x3 \" #> [7] \"\"                                                     #> [8] \" long_mixed_long = long_mixed %>% \"                   #> [9] \"  select(SUBJID, val1b, val2b) #dim=200x3 \""},{"path":"https://danchaltiel.github.io/EDCimport/reference/table_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify if a dataframe has a long or a wide format — table_format","title":"Identify if a dataframe has a long or a wide format — table_format","text":"dataset either wide format long format (link). function identifies format dataframe respect subject ID. dataframe wide long columns, considered \"mixed\".","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/table_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify if a dataframe has a long or a wide format — table_format","text":"","code":"table_format(   df,   id = get_subjid_cols(),   ...,   ignore_cols = get_meta_cols(0.95),   na_rm = FALSE,   warn = TRUE )"},{"path":"https://danchaltiel.github.io/EDCimport/reference/table_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify if a dataframe has a long or a wide format — table_format","text":"df dataframe id identifying subject ID ... used ignore_cols columns ignore. Usually meta columns (see get_meta_cols). na_rm whether consider missing values warn whether warn ID found","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/table_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify if a dataframe has a long or a wide format — table_format","text":"string value c(\"wide\", \"long\", \"mixed)","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/table_format.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify if a dataframe has a long or a wide format — table_format","text":"","code":"tm = edc_example_mixed() #> Warning: Option \"edc_lookup\" has been overwritten. sapply(tm, table_format, warn=FALSE)  #> $short #> [1] \"wide\" #>  #> $long_pure #> [1] \"long\" #>  #> $long_mixed #> [1] \"mixed\" #>  #> $date_extraction #> NULL #>  #> $datetime_extraction #> NULL #>  #> $.lookup #> NULL #>"},{"path":"https://danchaltiel.github.io/EDCimport/reference/unify.html","id":null,"dir":"Reference","previous_headings":"","what":"Unify a vector — unify","title":"Unify a vector — unify","text":"Turn vector length N vector length 1 checking one unique value. Useful safely flatten duplicated table. preserves label attribute set.","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/unify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unify a vector — unify","text":"","code":"unify(x)"},{"path":"https://danchaltiel.github.io/EDCimport/reference/unify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unify a vector — unify","text":"x vector","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/unify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unify a vector — unify","text":"vector length 1","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/unify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unify a vector — unify","text":"","code":"unify(c(1,1,1,1)) #> [1] 1 #unify(c(1,1,2,1)) #warning  library(dplyr) x=tibble(id=rep(letters[1:5],10), value=rep(1:5,10)) x %>% group_by(id) %>% summarise(value=unify(value)) #safer than `value=value[1]` #> # A tibble: 5 × 2 #>   id    value #>   <chr> <int> #> 1 a         1 #> 2 b         2 #> 3 c         3 #> 4 d         4 #> 5 e         5 x$value[2]=1 #x %>% group_by(id) %>% summarise(value=unify(value)) #warning about that non-unique value"},{"path":"https://danchaltiel.github.io/EDCimport/reference/waterfall_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a waterfall plot — waterfall_plot","title":"Generate a waterfall plot — waterfall_plot","text":"Generate waterfall plot","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/waterfall_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a waterfall plot — waterfall_plot","text":"","code":"waterfall_plot(   data_recist,   rc_sum = \"RCTLSUM\",   rc_resp = \"RCRESP\",   rc_date = \"RCDT\",   type = c(\"best_resp\", \"worst_resp\"),   rc_star = NULL,   arm = NULL,   warnings = getOption(\"edc_wp_warnings\", TRUE) )"},{"path":"https://danchaltiel.github.io/EDCimport/reference/waterfall_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a waterfall plot — waterfall_plot","text":"data_recist recist dataset rc_sum name target lesions length sum column data_recist, usually \"RCTLSUM\". rc_resp name response column data_recist, usually \"RCRESP\". rc_date name date column data_recist, usually \"RCDT\". type one c(\"best_resp\", \"worst_resp\") rc_star name column data_recist triggers star symbol. column character factor, NA patients without symbol. arm name treatment column data_recist. Can left NULL group. warnings whether warn problems","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/waterfall_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a waterfall plot — waterfall_plot","text":"ggplot","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/waterfall_plot.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Generate a waterfall plot — waterfall_plot","text":"Data ordered rc_date.","code":""},{"path":"https://danchaltiel.github.io/EDCimport/reference/waterfall_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a waterfall plot — waterfall_plot","text":"","code":"if (FALSE) { # \\dontrun{ waterfall_plot(rc, rc_date=\"RCDT\", rc_sum=\"RCTLSUM\", rc_resp=\"RCRESP\") waterfall_plot(rc, rc_date=\"RCDT\", rc_sum=\"RCTLSUM\", rc_resp=\"RCRESP\", type=\"worst_resp\") rc %>%    left_join(enrolres, by=\"SUBJID\") %>% #adds the ARM column   mutate(new_lesion = ifelse(RCNEW==\"1-Yes\", \"New lesion\", NA)) %>%    waterfall_plot(rc_date=\"RCDT\", rc_sum=\"RCTLSUM\", rc_resp=\"RCRESP\", arm=\"ARM\", rc_star=\"new_lesion\") } # }"},{"path":[]},{"path":[]},{"path":"https://danchaltiel.github.io/EDCimport/news/index.html","id":"sanity-checks-alerts-0-5-0","dir":"Changelog","previous_headings":"New features","what":"Sanity checks alerts","title":"EDCimport 0.5.0 (development version)","text":"New functions edc_data_warn() edc_data_stop(), alert data inconsistencies (#29, #39, #43). New function edc_warn_extraction_date(), alert data old.","code":"ae %>% filter(grade>5) %>% assert_no_rows() ae %>% filter(is.na(grade)) %>% edc_data_warn(\"Grade is missing\", issue_n=13) #> Warning: Issue #13: Grade is missing (8 patients: #21, #28, #39, #95, #97, ...)"},{"path":"https://danchaltiel.github.io/EDCimport/news/index.html","id":"miscellaneous-utils-0-5-0","dir":"Changelog","previous_headings":"New features","what":"Miscellaneous utils","title":"EDCimport 0.5.0 (development version)","text":"New function edc_population_plot() visualize patient analysis population (#56). New function edc_save_db_to_excel() export whole database Excel file, easier browse RStudio table viewer (#55). New function edc_new_project() create empty, standardized project (#54). New function edc_inform_code() show many code wrote (#49). New function search_for_newer_data() search path (e.g. Downloads) newer data archive (#46). New function crf_status_plot() show current database completion status (#48). New function save_sessioninfo(), save sessionInfo() text file (#42). New function fct_yesno(), easily format Yes/columns (#19, #23, #40). New function save_plotly(), save plotly HTML file (#15). New experimental functions table_format(), get_common_cols() get_meta_cols() might become useful find keys pivot summarise data.","code":""},{"path":"https://danchaltiel.github.io/EDCimport/news/index.html","id":"clinical-research-might-be-moved-to-another-package-0-5-0","dir":"Changelog","previous_headings":"New features","what":"Clinical research (might be moved to another package)","title":"EDCimport 0.5.0 (development version)","text":"New function lastnews_table() find last date information entered patient (#37). Useful survival. New function waterfall_plot() plot RECIST response target lesions percentage tumor reduction (#27). New functions describe adverse events: ae_table_grade_max(), ae_table_grade_n(), ae_table_soc() generate standardized tables. can turned flextables using as_flextable(). ae_plot_grade_max(), ae_plot_grade_n(), ae_plot_soc() generate standardized plots.","code":""},{"path":"https://danchaltiel.github.io/EDCimport/news/index.html","id":"bug-fixes--improvements-0-5-0","dir":"Changelog","previous_headings":"","what":"Bug fixes & Improvements","title":"EDCimport 0.5.0 (development version)","text":"read_trialmaster() output readable error password entered although one needed. read_trialmaster(split_mixed=\"TRUE\") work intended. assert_no_duplicate() now argument check duplicate groups, example visit (#17). find_keyword() robust inform proportion missing possible. edc_lookup() now retreive lookup table. Use build_lookup() build one table list. extend_lookup() fail anymore database faulty table.","code":""},{"path":"https://danchaltiel.github.io/EDCimport/news/index.html","id":"deprecations-0-5-0","dir":"Changelog","previous_headings":"","what":"Deprecations","title":"EDCimport 0.5.0 (development version)","text":"get_key_cols() replaced get_subjid_cols() get_crfname_cols(). check_subjid() replaced edc_warn_patient_diffs(). can either take vector dataframe input, message informative.","code":""},{"path":"https://danchaltiel.github.io/EDCimport/news/index.html","id":"edcimport-041","dir":"Changelog","previous_headings":"","what":"EDCimport 0.4.1","title":"EDCimport 0.4.1","text":"CRAN release: 2023-12-19","code":""},{"path":"https://danchaltiel.github.io/EDCimport/news/index.html","id":"bug-fixes--improvements-0-4-1","dir":"Changelog","previous_headings":"","what":"Bug fixes & Improvements","title":"EDCimport 0.4.1","text":"Changes testing environment package can installed CRAN despite firewall policies forbidding password-protected archive downloading. Fixed bug corrupted XPT file can prevent whole import fail.","code":""},{"path":"https://danchaltiel.github.io/EDCimport/news/index.html","id":"edcimport-040","dir":"Changelog","previous_headings":"","what":"EDCimport 0.4.0","title":"EDCimport 0.4.0","text":"CRAN release: 2023-12-11","code":""},{"path":"https://danchaltiel.github.io/EDCimport/news/index.html","id":"new-features-0-4-0","dir":"Changelog","previous_headings":"","what":"New features","title":"EDCimport 0.4.0","text":"New function check_subjid() check vector missing patients (#8). New function assert_no_duplicate() abort table duplicates subject ID column(#9). New function manual_correction() safely hard-code correction waiting TrialMaster database updated. New function edc_options() manage EDCimport global parameterization. New argument edc_swimmerplot(id_lim) subset swimmer plot patients . New option read_trialmaster(use_cache=\"write\") read zip still update cache. can now use syntax read_trialmaster(split_mixed=c(\"col1\", \"col2\")) split datasets need (#10).","code":"options(edc_subjid_ref=enrolres$subjid) check_subjid(treatment$subjid) check_subjid(ae$subjid) tibble(subjid=c(1:10, 1)) %>% assert_no_duplicate() %>% nrow() #Error in `assert_no_duplicate()`: #! Duplicate on column \"subjid\" for value 1."},{"path":"https://danchaltiel.github.io/EDCimport/news/index.html","id":"bug-fixes--improvements-0-4-0","dir":"Changelog","previous_headings":"","what":"Bug fixes & Improvements","title":"EDCimport 0.4.0","text":"Reading read_trialmaster() cache output error parameters (split_mixed, clean_names_fun) different (#4). split_mixed_datasets() now fully case-insensitive. Non-UTF8 characters labels now identified corrected reading (#5).","code":""},{"path":"https://danchaltiel.github.io/EDCimport/news/index.html","id":"minor-breaking-changes-0-4-0","dir":"Changelog","previous_headings":"","what":"Minor breaking changes","title":"EDCimport 0.4.0","text":"read_trialmaster(use_cache=\"write\") now default. Reading cache stable yet, opt-rather opt-. read_trialmaster(extend_lookup=TRUE) now default. Options edc_id, edc_crfname, edc_verbose respectively renamed edc_cols_id, edc_cols_crfname, edc_read_verbose clarity.","code":""},{"path":"https://danchaltiel.github.io/EDCimport/news/index.html","id":"edcimport-030-20230519","dir":"Changelog","previous_headings":"","what":"EDCimport 0.3.0 2023/05/19","title":"EDCimport 0.3.0 2023/05/19","text":"CRAN release: 2023-05-19","code":""},{"path":"https://danchaltiel.github.io/EDCimport/news/index.html","id":"new-features-0-3-0","dir":"Changelog","previous_headings":"","what":"New features","title":"EDCimport 0.3.0 2023/05/19","text":"New function edc_swimmerplot() show swimmer plot dates database easily find outliers. New features read_trialmaster(): clean_names_fun=some_fun clean names tables. instance, clean_names_fun=janitor::clean_names() turn default SAS uppercase column names valid R snake-case column names. split_mixed=TRUE split tables contain long short data regarding patient ID one long table one short table. See ?split_mixed_datasets() details. extend_lookup=TRUE improve lookup table additional information. See ?extend_lookup() details. key_columns=get_key_cols() can change default column names patient ID CRF name (used new features). Standalone functions extend_lookup() split_mixed_datasets(). New helper unify(), turns vector duplicate values vector length 1.","code":""},{"path":"https://danchaltiel.github.io/EDCimport/news/index.html","id":"bug-fixes-0-3-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"EDCimport 0.3.0 2023/05/19","text":"Reading errors now handled read_trialmaster() instead failing. one XPT file corrupted, resulting object contain error message instead dataset. find_keyword() now robust non-UTF8 characters labels. Option edc_lookup now set even reading cache. SAS formats containing = now work intended.","code":""},{"path":"https://danchaltiel.github.io/EDCimport/news/index.html","id":"edcimport-021-20221101","dir":"Changelog","previous_headings":"","what":"EDCimport 0.2.1 2022/11/01","title":"EDCimport 0.2.1 2022/11/01","text":"CRAN release: 2022-12-02 Import data TrialMaster using tm = read_trialmaster(\"path//archive.zip\"). Search keyword column name label using find_keyword(\"date\", data=tm$.lookup). can also generate lookup table arbitrary list dataframe using build_lookup(my_data). Load datasets global environment using load_list(tm) avoid typing tm$ everywhere. Browse available global options using ?EDCimport_options.","code":""},{"path":"https://danchaltiel.github.io/EDCimport/news/index.html","id":"edcimport-010","dir":"Changelog","previous_headings":"","what":"EDCimport 0.1.0","title":"EDCimport 0.1.0","text":"Draft version","code":""}]
